spring:
  cloud:
    gateway:
      routes[0]:
        id: user-service
        predicates: Path=/api/user/**
        uri: lb://user-service
      routes[1]:
        id: accomodation-service
        predicates: Path=/api/accomodation/**
        uri: lb://accomodation-service
      routes[2]:
        uri: lb://notification-service
        predicates: Path=/api/notification/**
        id: notification-service
      routes[3]:
        uri: lb://reviews-service
        predicates: Path=/api/reviews/**
        id: reviews-service
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${ISSUER_URI:http://localhost:9191/realms/booking-realm}
#          jwk-set-uri: http://localhost:9090/realms/booking-realm/protocol/openid-connect/certs
  main:
    allow-bean-definition-overriding: true
#      web-application-type: reactive
  application:
    name: API-GATEWAY

jwt:
  auth:
    converter:
      resource-id: booking-auth
      principle-attribute: preferred_username

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER:http://localhost:8761/eureka}

server:
  port: '8085'

logging:
  level:
    org:
      springframework:
        cloud:
          gateway:
            route:
              RouteDefinitionLocation: INFO
            nodeValue: TRACE
    root: INFO

management:
  endpoints:
    web:
      exposure:
        include: prometheus